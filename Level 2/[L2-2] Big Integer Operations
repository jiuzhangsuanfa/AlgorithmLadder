# 大整数运算(Big Integer Operations)

## 1.大整数加法(Addition of large integers)

当计算机遇到 10 + 10 的问题时，可以快速的给出答案，等于2。

当计算机遇到 $10^5$+ $10^5$ 的问题时，可以快速的给出答案，等于 200000。

那么计算机需要计算 $10^{50}$+ $10^{50}$ 的问题时，该怎么办呢？



这个时候Python仍然可以计算，完全不受影响：

```python
a = 10 ** 50
b = 10 ** 50
print(a + b)
# output : 200000000000000000000000000000000000000000000000000
```



而Java的计算中就会遇到错误，我们可以知道在Java中：

**int类型：**

- 最小值是 **-2,147,483,648（-$2^{31}$）**；
- 最大值是 **2,147,483,647（$2^{31}$ - 1）**；

**long类型：**

- 最小值是 **-9,223,372,036,854,775,808（-$2^{63}$）**；
- 最大值是 **9,223,372,036,854,775,807（$2^{63 }$ - 1）**；



因此遇到此类问题，就可以使用**模拟法**来解决。

所谓模拟法，就是在小学一年级的时候，老师教我们的**列竖式计算大法**。

<img src="https://github.com/jiuzhangsuanfa/AlgorithmLadder/blob/master/Level%202/Image/%5BL2-2%5D%20big%20integer%20add%201.png?raw=true" style="zoom:67%;" />

那么在计算机中2021042899+199903079我们该如何计算呢？

**第一步：**在数学中，我们是从最后一位开始计算，而在计算机中，数组是从下标0开始计算。因此，需要把输入的字符串倒序存储。

<img src="https://github.com/jiuzhangsuanfa/AlgorithmLadder/blob/master/Level%202/Image/%5BL2-2%5D%20big%20integer%20add%202.png?raw=true" style="zoom:67%;" />



**第二步：**计算最开始的两个数字，9+9=18 ，将个位数`8`存放在第一个位置，十位数`1`加到下一个位置。

<img src="https://github.com/jiuzhangsuanfa/AlgorithmLadder/blob/master/Level%202/Image/%5BL2-2%5D%20big%20integer%20add%203.png?raw=true" style="zoom:67%;" />



**第三步：**继续计算第二列数字，1+9+7=17，同理将个位数`7`存放在第二个位置，十位数`1`加到下一个位置。

<img src="https://github.com/jiuzhangsuanfa/AlgorithmLadder/blob/master/Level%202/Image/%5BL2-2%5D%20big%20integer%20add%204.png?raw=true" style="zoom:67%;" />

**第四步：**以此类推，最后逆序输出，得到答案2220945978。

<img src="https://github.com/jiuzhangsuanfa/AlgorithmLadder/blob/master/Level%202/Image/%5BL2-2%5D%20big%20integer%20add%205.png?raw=true" style="zoom:67%;" />

<img src="https://github.com/jiuzhangsuanfa/AlgorithmLadder/blob/master/Level%202/Image/%5BL2-2%5D%20big%20integer%20add%206.png?raw=true" style="zoom:67%;" />

**思考：**如果遇到9999999999+999999999的情况，有最高位的进位该如何处理？

<img src="https://github.com/jiuzhangsuanfa/AlgorithmLadder/blob/master/Level%202/Image/%5BL2-2%5D%20big%20integer%20add%207.png?raw=true" style="zoom:67%;" />



**带着这个问题，让我们一起学习一下Java的代码：**

```java
public class Solution {
    /**
     * @param num1 a non-negative integers
     * @param num2 a non-negative integers
     * @return return sum of num1 and num2
     */
    public String addStrings(String num1, String num2) {
        // Write your code here
        int i = num1.length() - 1;
        int j = num2.length() - 1;
        int carry = 0;
        String result = "";
        while (i >= 0 || j >= 0) {
            if (i >= 0) {
                carry += num1.charAt(i--) - '0';
            }
            if (j >= 0) {
                carry += num2.charAt(j--) - '0';
            }
            result = carry % 10 + result;
            carry /= 10;
        }
        return carry > 0 ? "1" + result : result; //在这里处理最高位的进位
    }
}
```



## 2.大整数减法(Subtraction of large integers)

大数减法和大数加法有着异曲同工之妙。

特殊的点就在于，a - b 可能会变成负数，因此，在模拟运算前，我们要先**判断正负**。

```java
char sign = '+';  //默认为正数
if (lenA < lenB) {
	sign = '-';
} else if (lenA == lenB) {
	int i = lenA - 1;
	// 找到第一个不相等的位置
    while (i > 0 && a[i] == b[i]) {
        i--;
    }
    if (a[i] < b[i]) {
        sign = '-';
    }
}
```

如果a - b为负数，那么在接下来的计算中，我们需要用 b - a来操作。

**思考：聪明的你，自己尝试写一下代码吧。**



## 3.大整数乘法(Multiplication of large integers)

同样的，大整数乘法在Python中仍然可以计算，完全不受影响：

```python
a = 10 ** 50
b = 10 ** 50
print(a * b)
# output : 10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000

```



Java中的大整数乘法实际上可以转化为大整数加法做。

**第一步：**参照乘法的竖式计算方法，用num1每一位去乘num2。

从低位开始，用4*3079=12316。

<img src="https://github.com/hzbeiweiwei/AlgorithmLadder/blob/master/Level%202/Image/%5BL2-2%5D%20big%20integer%20add%208.png?raw=true" style="zoom:67%;" />

用1*3079=3079。

<img src="https://github.com/hzbeiweiwei/AlgorithmLadder/blob/master/Level%202/Image/%5BL2-2%5D%20big%20integer%20add%209.png?raw=true" style="zoom:67%;" />

用8*3079=24632

<img src="https://github.com/hzbeiweiwei/AlgorithmLadder/blob/master/Level%202/Image/%5BL2-2%5D%20big%20integer%20add%2010.png?raw=true" style="zoom:67%;" />

将这些值按位相加，存储到res中，暂时不考虑进位。

<img src="https://github.com/hzbeiweiwei/AlgorithmLadder/blob/master/Level%202/Image/%5BL2-2%5D%20big%20integer%20add%2012.png?raw=true" style="zoom:67%;" />

Java代码实现：

```java
 // 模拟乘法竖式计算
 for (int i = num1.length() - 1; i >= 0; i--) {
 	for (int j = num2.length() - 1; j >= 0; j--) {
 		res[i + j + 1] += (num1.charAt(i) - '0') * (num2.charAt(j) - '0');
 	}
 }
```



**第二步：**处理进位，例如1+9=10，`0`存放在当前位置，`1`进位到前一位。

<img src="https://github.com/hzbeiweiwei/AlgorithmLadder/blob/master/Level%202/Image/%5BL2-2%5D%20big%20integer%20add%2011.png?raw=true" style="zoom:67%;" />

Java代码实现：

```java
// 处理进位
for (int i = n - 1; i > 0; i--) {
	res[i - 1] += res[i] / 10;
	res[i] %= 10;
}
```



**第三步：**将数组转换为字符串后输出。

```java
// 将数组转换为字符串
String ans ="";
for (int i = 0; i < n; i++) {
	if (res[i] == 0 && ans.length() == 0){ // 处理前导零
		continue;
	}
	ans += (char)(res[i] + '0');
}
return ans;
```



**最终的完整Java代码，记得自己尝试打一遍哦。**

```java
public class Solution {
    /**
     * @param num1: a non-negative integers
     * @param num2: a non-negative integers
     * @return: return product of num1 and num2
     */
    public String multiply(String num1, String num2) {
        if (num1.equals("0") || num2.equals("0")) {
            return "0";
        }
        int n = num1.length() + num2.length();
        int[] res = new int[n];
        // 模拟乘法竖式计算
        for (int i = num1.length() - 1; i >= 0; i--) {
            for (int j = num2.length() - 1; j >= 0; j--) {
                res[i + j + 1] += (num1.charAt(i) - '0') * (num2.charAt(j) - '0');
            }
        }
        // 处理进位
        for (int i = n - 1; i > 0; i--) {
            res[i - 1] += res[i] / 10;
            res[i] %= 10;
        }
        // 将数组转换为字符串
        String ans ="";
        for (int i = 0; i < n; i++) {
            if (res[i] == 0 && ans.length() == 0){// 处理前导零
                continue;
            }
            ans += (char)(res[i] + '0');
        }
        return ans;
    }
}
```




