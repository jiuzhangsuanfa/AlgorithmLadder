# 单链表(Single linked list)

## 1、链表(Linked list)

什么是链表？ 

可以简单的理解为由节点构成的列表。



什么是节点？

例如，我们可以这样定义一个**链表节点**。

```java
class ListNode{
	public int val;
	public ListNode next;
}
```

```python
class ListNode:
	def __init__(self, val):
		self.val = val
		self.next = None
```



怎样建立一个链表呢？

例如，我们可以这样手动建立一个**链表**。

首先，创建四个独立结点。

![](https://github.com/jiuzhangsuanfa/AlgorithmLadder/blob/master/Level%202/Image/%5BL2-3%5D%20Linked%20list%201.png?raw=true)

```java
ListNode node1 = new ListNode(1);
ListNode node2 = new ListNode(3);
ListNode node3 = new ListNode(5);
ListNode node4 = new ListNode(7);
```

```python
node_1 = ListNode(1)
node_2 = ListNode(3)
node_3 = ListNode(5)
node_4 = ListNode(7)
```

串联四个结点。

![](https://github.com/jiuzhangsuanfa/AlgorithmLadder/blob/master/Level%202/Image/%5BL2-3%5D%20Linked%20list%202.png?raw=true)

```java
node1.next = node2;
node2.next = node3;
node3.next = node4;
```

```python
node1.next = node2;
node2.next = node3;
node3.next = node4;
```



## 2、链表及其操作(Linked list and its operation)

#### 1、遍历（traverse）

按顺序一个一个遍历。

![](https://github.com/jiuzhangsuanfa/AlgorithmLadder/blob/master/Level%202/Image/%5BL2-3%5D%20Linked%20list%202.png?raw=true)

```java
ListNode cur = node1;
while(cur != null){
    System.out.print(cur.val + " ");
    cur = cur.next;
}
```

```python
cur = node_1
while cur is not None:
	print(cur.val, end = ' ')
	cur = cur.next
```



#### 2、插入（insert）

在指定位置插入指定的结点。

![](https://github.com/jiuzhangsuanfa/AlgorithmLadder/blob/master/Level%202/Image/%5BL2-3%5D%20Linked%20list%203.png?raw=true)

```java
add(2, 2);  //插入在中间位置
```

```python
add(2, 2);  # 插入在中间位置
```

![](https://github.com/jiuzhangsuanfa/AlgorithmLadder/blob/master/Level%202/Image/%5BL2-3%5D%20Linked%20list%204.png?raw=true)

```java
add(0, 6);  //插入在头部
```

```python
add(0, 6);  # 插入在头部
```



#### 3、查找（find）

遍历到指定位置。

![图5](https://github.com/jiuzhangsuanfa/AlgorithmLadder/blob/master/Level%202/Image/%5BL2-3%5D%20Linked%20list%205.png?raw=true)

```java
// 遍历到指定位置
boolean findNumber(int[] array, int target) {
    for (int i = 0; i < array.length; ++i) {
        if (target == array[i]) {  //找到对应target
       		return true;
        }
    }
    return false;
}
```

```python
# 方法一
get(2);  # 查找第二个位置

# 方法二
def find_number(nums, target):
    for num in nums:
        if num == target:
            return True
    return False
```



## 3、时间复杂度(Time Complexity)

在 Java 中各项操作的时间复杂度。

|           | array list | linked list |
| :-------: | :--------: | :---------: |
| add(0, v) |    O(n)    |    O(1)     |
| add(n, v) |    O(1)    |    O(n)     |
|    add    |    O(n)    |    O(n)     |
|    get    |    O(1)    |    O(n)     |
|    set    |    O(1)    |    O(n)     |



在 python 中各项操作的时间复杂度。

|            | array list | linked list |
| :--------: | :--------: | :---------: |
| add(0, v)  |    O(n)    |    O(1)     |
| add(n, v)  |    O(1)    |    O(n)     |
| add/remove |    O(n)    |    O(n)     |
|    get     |    O(1)    |    O(n)     |
|    set     |    O(1)    |    O(n)     |



一起来做一些练习吧！

**基本题型** 

增加节点 219. Insert Node in Sorted Linked List 

删除节点 452. Remove Linked List Elements 

交换节点 511. Swap Two Nodes in Linked List 

寻找中点 228. Middle of Linked List 

旋转列表 170. Rotate List 

翻转列表 99. Reorder List 

合并列表 99. Reorder List 

循环列表 599. Insert into a Cyclic Sorted List
