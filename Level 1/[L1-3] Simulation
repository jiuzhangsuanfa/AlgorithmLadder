# 模拟法(Simulation method)



什么叫模拟？ 

模拟顾名思义，就是按照题目的要求，一步步写出代码。

话不多说，我们通过一些例子来体会一下模拟法。



## 1、判断数字与字母字符

**描述**

给出一个字符`c`，如果它是一个数字或字母，返回`true`，否则返回`false`。

**样例**

**样例 1：**

输入：

```
c = '1'
```

输出：

```
true
```

解释：

'1'属于数字。



**解题思路：**这道题只要按照题目意思模拟，判断该字符是不是一个数字字符或者字母字符即可。

**参考代码：**

```java
public class Solution {
    /**
     * @param c: A character.
     * @return: The character is alphanumeric or not.
     */
    public boolean isAlphanumeric(char c) {
        // write your code here
        if (c >= 'a' && c <= 'z') {
            return true;
        }
        if (c >= 'A' && c <= 'Z') {
            return true;
        }
        if (c >= '0' && c <= '9') {
            return true;
        }
        return false;
    }
}
```

```python
class Solution:
    """
    @param c: A character.
    @return: The character is alphanumeric or not.
    """
    def isAlphanumeric(self, c):
        # write your code here
        if ord(c) >= ord('a') and ord(c) <= ord('z'):
            return True
        if ord(c) >= ord('A') and ord(c) <= ord('Z'):
            return True
        if ord(c) >= ord('0') and ord(c) <= ord('9'):
            return True
        return False
```





## 2、反转一个三位整数

**描述**

反转一个只有3位数的整数。

你可以假设输入一定是一个只有三位数的整数，这个整数大于等于100，小于1000。

**样例**

**样例 1：**

输入：

```
number = 123
```

输出：

```
321
```

解释：

反转数字。



**解题思路：**这道题只要按照题目意思模拟，交换该三位数的第一位和第三位即可。

**参考代码：**

```java
public class Solution {
    /*
     * @param number: A 3-digit number.
     * @return: Reversed number.
     */
    public int reverseInteger(int number) {
        // write your code here
        //获得个位数
        int num1 = number % 10;
        //获得十位数
        int num2 = (number / 10) % 10;
        //获得百位数
        int num3 = ((number / 10) / 10) % 10;
        //相加
        return num3 + num2 * 10 + num1 * 100;
    }
}
```

```python
class Solution:
    """
    @param number: A 3-digit integer 
    @return: Reversed integer 
    """
    def reverseInteger(self, number):
        #获得个位数并将它变成百位数，获得十位数并将它变成十位数，获得百位数并将它变成个数位
        return number % 10 * 100 + number / 10 % 10 * 10 + number / 100
```



## 3、简单计算器

**描述**

给出两个整数 *a* , *b* ,以及一个操作符 *opeator*

```
+, -, *, /
```

返回结果 `a<operator>b`

**样例**

**样例 1：**

输入：

```
a = 1
b = 2
operator = +
```

输出：

```
3
```

解释：

返回 1 + 2 的结果

**样例 2：**

输入：

```
a = 10
b = 20
operator = *
```

输出：

```
200
```

解释：

返回10 * 20的结果

**样例 3：**

输入：

```
a = 3
b = 2
operator = /
```

输出：

```
1
```

解释：

返回 3 / 2的结果

**样例 4：**

输入：

```
a = 10
b = 11
operator = -
```

输出：

```
-1
```

解释：

返回 10 - 11的结果



**解题思路：**这道题只要按照题目意思模拟，返回加减乘除后的操作结果即可。

**参考代码：**

```java
public class Calculator {
    /**
      * @param a, b: Two integers.
      * @param operator: A character, +, -, *, /.
      */
    public int calculate(int a, char operator, int b) {
        switch (operator) {
            case '+': return a + b;
            case '-': return a - b;
            case '*': return a * b;
            case '/': return a / b;
        }
        return 0;
    }
}
```

```python
class Calculator:
    """
    @param a, b: Two integers.
    @param operator: A character, +, -, *, /.
    """
    def calculate(self, a, operator, b):
        if operator == '+':
            return a + b
        elif operator == '-':
            return a - b
        elif operator == '*':
            return a * b
        elif operator == '/':
            return a / b
```



## 4、美观打印

**描述**

给出文本 `text` ，其中有 `n` 条句子，每个句子由数个单词组成（数量大于 `0`），以及一个宽度 `width`，请将句子进行美观打印在宽度为 `width` 的窗口内。
打印的规则如下：

1. 两条句子不应该在同一行，即打印完一个句子后应该换行。
2. 每个句子中，单词应该从左往右顶格打印，两个单词之间用一个空格隔开。
3. 如果一行中右侧剩下的空格不足填入新的单词，那么换行，从头开始打印。
4. 每一行末尾要用空格填充，使其长度和 `width` 相等。
5. 打印结果要用一圈星号 '*' 包装，星号不计入宽度中。

给定的文本中，单词的数量为 m*m*，1 \le m \le 2001≤*m*≤200，每个单词的长度为 l*l*，1 \le l \le 201≤*l*≤20。
宽度为 width*w**i**d**t**h*，2 \le width \le 802≤*w**i**d**t**h*≤80，保证 width*w**i**d**t**h* 大于等于最长的单词长度。

**样例**

**样例 1：**

输入：

```
text = [["hello","world"],["I","love","cats","and","dogs"]]
width = 12
```

输出：

```
["**************","*hello world *","*I love cats *","*and dogs    *","**************"]
```

解释：

打印结果和下面一样

```
**************
*hello world *
*I love cats *
*and dogs    *
**************
```



**解题思路：**这道题是较为困难的模拟题，题目中要求较多，需要细心的注意小细节，打印输出。

**参考代码：**

```java
public class Solution {
    /**
     * @param text: the text to print
     * @param width: the width of the window
     * @return: return the result of pretty print.
     */
    public List<String> prettyPrint(List<List<String>> text, int width) {
        List<String> result = new ArrayList<String>();
        result.add(multi('*', width + 2));
        String emptyLine = '*' + multi(' ', width) + '*';
        
        for (List<String> line: text) {
            String newLine = new String(emptyLine);
            int index = 1;
            for (String word: line) {
                int len = word.length();
                if (index + len - 1 > width) {
                    result.add(newLine);
                    newLine = new String(emptyLine);
                    index = 1;
                }
                newLine = replace(newLine, word, index);
                index += len + 1;
            }
            if (!newLine.equals(emptyLine)) {
                result.add(newLine);
            }
        }
        
        result.add(multi('*', width + 2));
        return result;
    }
    public String multi(char c, int length) {
        char[] s = new char[length];
        for (int i = 0; i < length; i++) {
            s[i] = c;
        }
        return new String(s);
    }
    public String replace(String newLine, String word, int index) {
        byte[] bytes = newLine.getBytes();
        byte[] word_bytes = word.getBytes();
        for (int i = 0; i < word.length(); i++) {
            bytes[index + i] = word_bytes[i];
        }
        return new String(bytes);
    }
}
```

```python
class Solution:
    """
    @param text: the text to print
    @param width: the width of the window
    @return: return the result of pretty print.
    """
    def prettyPrint(self, text, width):
        result = []
        result.append('*' * (width + 2))
        empty_line = '*' + ' ' * width + '*'
        
        for line in text:
            new_line = empty_line[:]
            index = 1
            for word in line:
                length = len(word)
                # 如果放不下的话，换行
                if index + length - 1 > width:
                    result.append(new_line)
                    new_line = empty_line[:]
                    index = 1
                new_line = self.replace(new_line, word, index)
                index += length + 1
                
            if new_line != empty_line:
                result.append(new_line)
        
        result.append('*' * (width + 2))
        return result
    
    def replace(self, new_line, word, index):
        bytes = list(new_line)
        word_bytes = list(word)
        for i in range(len(word)):
            bytes[index + i] = word_bytes[i]
        return ''.join(bytes)
```



模拟法是在算法中较为简单的一个方法，考验的是程序员的编写代码能力和细心。

此类的题可以多做，慢慢找到感觉，不求快，求精准。
