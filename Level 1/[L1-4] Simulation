# 数组(Array)

通常数组是用来存储相同类型数据的集合，比如用来存储整数的整数数组，存储字符的字符数组等。数组是编程语言中最常用的数据结构，所有语言对于数组都有着各自的实现方式。

## 1.声明数组变量(Declare array variables)

在Java中，数组是用来存储固定大小的同类型元素，使用前必须提前声明数组变量，声明数组变量的方法如下：

```java
// dataType[] arrayName;
// dataType是数组中存储数据的类型，arrayName是数组名。

int[] array; // 这个例子中声明了一个int类型的数组变量，数组名是array。
```

在Python中由于不需要声明变量，所以只需要在使用的时候直接使用变量名即可，初次使用使需要进行初始化。

## 2.创建数组(Create array)

Java中仅仅声明一个数组变量是无法使用的，需要使用new操作符来真正的创建一个数组，也就是申请数组所需要的内存空间，只有在申请完成之后，才可以对这个数组进行访问等操作，创建数组的语法如下：

```java
// arrayName = new dataType[arraySize];
// arrayName是声明的数组名，dataType是数据类型，arraySize是申请数组的大小。

array = new int[3]; // 创建了一个大小为3的int类型数组。
```

在Python中，最常见的数组形式是列表(List)和元组(tuple)，两者的不同之处在于元组中的元素无法修改，并且列表使用[]定义，元组使用()定义。另外Python中的数组还可以存储不同类型的元素，比如：

```python
array1 = [1, 2, 3, 4] # 列表
array2 = (5, 6, 7) # 元组
array3 = [1, "list", 3.5] # 这个列表中，包含了不同数据类型的元素。
array4 = ("abc", [1,2,3], 3) # 这个元组中，还包含了一个列表类型。
```

在Python中还可以对数组进行乘法或者简易for循环语句来得到更大的矩阵，对于简单数组的创建是十分方便，也方便进行初始化，比如：

```python
arr1 = [0] * 5
arr2 = [0 for _ in range(5)]
print("arr1 = " + str(arr1))
print("arr2 = " + str(arr2))
# 输出：
# arr1 = [0, 0, 0, 0, 0]
# arr2 = [0, 0, 0, 0, 0]
```

但是使用乘法进行多维数组的列表创建时，往往不会创建一片新的数组空间，而仅仅是复制引用，这个在后文讲多维数组时具体讲解。

## 3.遍历数组(Traversing arrays)

由于数组中存储的一般都是相同类型的数据，所以我们在对数组中的元素进行处理时，通常都是同一种逻辑，所以往往需要配合循环语句来对数组进行处理或使用，又叫遍历数组，比如：

```java
int[] arr = {1, 2, 3, 4, 5};
for (int i = 0; i < arr.length; i++) {
	arr[i] += 1;
}
// arr.length用来取得数组的大小
for (int i = 0; i < arr.length; i++) {
    System.out.println(arr[i]);
}
/*
输出：
2
3
4
5
6
*/
```

```python
arr = [1, 2, 3, 4, 5]
for i in range(len(arr)):
    arr[i] += 1
# len(arr)用来取得数组的大小
for i in range(len(arr)):
    print(arr[i])
"""
输出：
2
3
4
5
6
"""
```

JDK1.5中引进了一种新的循环方式，被称为 For-Each 循环，它的特点就是可以不利用循环下标而直接访问数组中的值，在Python中也存在这种遍历方式，比如：

```java
int[] arr = {1, 2, 3, 4, 5};
for (int v : arr) {
    System.out.println(v);
}
/*
输出：
1
2
3
4
5
*/
```

```python
arr = [1, 2, 3, 4, 5]
for v in arr:
    print(v)
"""
输出：
1
2
3
4
5
"""
```

## 4.多维数组(Multidimensional array)

多维数组就是数组的嵌套，将低维数组嵌套在数组中，就形成了多维数组，比如二维数组就是由一个个一维数组组成的，其中每一个元素都是一个一维数组，例如：

```java
int arr1[][] = new int[3][3];
// 创建了一个3 * 3的数组，相当于3行3列的二维数组。
int arr2[][] = new int[4][5];
// 创建了一个4 * 5的数组，相当于4行5列的二维数组。
arr2[0][0] = 100;
// 二维数组的使用与一维数组类似，使用下标访问。
```

```python
arr1 = [[1,2,3],[2,3,4],[3,4,5]]
# arr1是一个3 * 3的列表，相当于3行3列的二维数组。
arr1[0][0] = 3
# Python二维数组的使用与一维数组类似，使用下标访问。
print(arr1)
# 输出：
# [[3, 2, 3], [2, 3, 4], [3, 4, 5]]
```

上文中讲到Python中使用乘法创建多维数组时会存在问题，比如：

```python
arr = [[1,2,3]] * 3
arr[0][0] = 100
print(arr)
# 输出：
# [[100, 2, 3], [100, 2, 3], [100, 2, 3]]
# 可以看到仅改变了一行中的一个值，但是会影响到其他的行
print(id(arr[0]))
print(id(arr[1]))
print(id(arr[2]))
# 输出：
# 1541246571016
# 1541246571016
# 1541246571016
# 可以看到对于列表使用乘法，实际是复制了引用，并没有真正创建新的数组。
```

所以在Python中创建多维数组时，我们可以使用for循环创建多维数组，比如：

```python
arr = [[0 for _ in range(3)] for _ in range(4)]
# 创建了一个4 * 3的二维数组，并且已经全部初始化为0。
arr[0][0] = 100
print(arr)
# 输出：
# [[100, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0]]
# 可以看到这种方式改变一行中的一个值，不会影响其他行的元素。
print(id(arr[0]))
print(id(arr[1]))
# 输出：
# 2327560868872
# 2327566965384
# 可以看到与上面乘法不同的是，这种方式不是复制了引用，而是真正的创建了数组。
```

